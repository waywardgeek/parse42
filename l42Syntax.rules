// This syntax is used parse syntax rules.
statement simpleStatement: "statement" statementExpr ":" patternExpr
statement blockStatement: "blockstatement" usesExpr ":" patternExpr
statement ruleStatement: ident ":" ruleExpr
blockstatement groupStatement: "group"
statement leftStatement: "left" ident ":" patternExpr
statement rightStatement: "right" ident ":" patternExpr
statement mergeStatement: "merge" ident ":" patternExpr
statement noneStatement: "none" ident ":" patternExpr

group {
    usesExpr: useSyntax(statementExpr ident) | statementExpr
    statementExpr: ident | before(ident identListExpr) | after(ident identListExpr)
    identListExpr: ident | sequence[ident]

    none useSyntax: expr "uses" expr
    none before: expr "before" expr
    none after: expr "after" expr
}
group {
    ruleExpr: nodeExpr | or[nodeExpr]
    nodeExpr: ident | string | operator(ident nodeListExpr) | list(ident nodeExpr)
    nodeListExpr: nodeExpr | sequence(nodeExpr)

    merge or: expr "|" expr
    none list: expr "[" expr "]"
    none operator: expr "(" expr ")"
}
group {
    patternExpr: elementExpr | sequence[elementExpr]
    elementExpr: string | ident
}
// This operator is available in all groups
merge sequence: expr expr # Operators without tokens are allowed
